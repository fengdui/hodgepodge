1 建造者模式
java.lang.StringBuilder#append() (unsynchronized)
java.lang.StringBuffer#append() (synchronized)
lombok
创建了一个计算脚本参数建造者，里面包含了一个脚本的各个部分，最后调用build返回组装好的indicalcparam。
2 工厂模式
简单工厂：把对象的创建放到一个工厂类中，通过参数来创建不同的对象。
这个缺点是每添一个对象，就需要对简单工厂进行修改（尽管不是删代码，仅仅是添一个switch case，但仍然违背了“不改代码”的原则）
工厂方法：每种产品由一种工厂来创建，一个工厂保存一个new
基本完美，完全遵循 “不改代码”的原则
抽象工厂：仅仅是工厂方法的复杂化，保存了多个new
大工程才用的上

项目中有11个模板，模板是用来生成指标的，页面上对应11个模板，用工厂模式根据模板的类型来创建模板。


3 策略模式
做同一件事情不同的方法，项目中都很多规则，每一种格式不一样，用了策略模式使用不同的策略解析
4 模板方法模式
父类定义一个流程，子类去实现
5 观察者模式
可以用来做满足某种条件触发的一些工作
6 迭代子模式
java中的迭代器就是
7 责任链模式
springmvc controller的拦截器 tomcat中的过滤器
优惠券计算
消息处理
用户进度事件处理
8 命令模式
mybatis中的mappermethod 根据command跳转到多个方法中
熔断hstix
9 备忘录模式
10 状态模式
11 访问者模式
12 中介者模式
13 解释器模式

14 适配器模式
对于某些接口不一致的情况，可以用适配器模式，
比如springmvc中的HandlerAdapter
mybatis中的routingstatementhandler，找到对应的statementhandler，
simplestatementhandler,preparedstatementhandler,callablestatementhandler
15 外观模式
使用外观模式对其他jar包的接口封装了一层。
对于其他模块使用该模式，可以对一些类只暴露你想暴露的接口
16 代理模式
不用多说，框架里面都是代理。
17 装饰器模式
可以对某个方法进行装饰，以增强功能，比如java中的流
18 桥接模式
19 组合模式
20 享元模式